import logging

from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker
from telegram import Update, ReplyKeyboardMarkup, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Updater, CommandHandler, MessageHandler, filters, CallbackContext, Application, \
    CallbackQueryHandler
from config import BOT_TOKEN
from data import db_session
import os
from data.reviews import Review

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.DEBUG
)


reply_keyboard = [
        [InlineKeyboardButton("–ü—Ä–æ–±–ª–µ–º—ã —Å –∑–∞–∫–∞–∑–æ–º", callback_data='option1')],
        [InlineKeyboardButton("–û –Ω–∞—Å", callback_data='option2')],
        [InlineKeyboardButton("–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤", callback_data='option3')]
    ]
markup = InlineKeyboardMarkup(reply_keyboard)

def create_return_button():
    return InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è", callback_data='return')

async def start(update, context):
    await show_main_menu(update, context)

async def button(update, context: CallbackContext):
    query = update.callback_query
    query.answer()
    if query.data == 'option2':
        aboutus_keyboard = [
            [InlineKeyboardButton('–û —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞—Ö', callback_data='aboutus')],
            [create_return_button()]
             ]
        aboutus_markup = InlineKeyboardMarkup(aboutus_keyboard)
        photo_aboutus = 'https://cdn.midjourney.com/adbd95a3-aa00-4578-ab87-6e79e5d8a307/0_2.png'
        await context.bot.send_photo(
            chat_id=query.message.chat_id,
            photo=photo_aboutus,
            caption=(
                "<b> üêå HomeBerries</b> - —ç—Ç–æ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω, –≤–¥–æ—Ö–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ä–æ—Å—Å–∏–π—Å–∫–∏–º –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω–æ–º <i>WildBerries</i>.\n\n"
                "üõí –ú—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —à–∏—Ä–æ–∫–∏–π –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –¥–æ–º–∞, –≤–∫–ª—é—á–∞—è <i>–æ–¥–µ–∂–¥—É, "
                "—ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫—É, —Ç–æ–≤–∞—Ä—ã –¥–ª—è –∫—É—Ö–Ω–∏ –∏ –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ</i>."
                "\n\n<b>‚úÖ –ù–∞—à–∞ —Ü–µ–ª—å</b> ‚Äî —Å–¥–µ–ª–∞—Ç—å –ø–æ–∫—É–ø–∫–∏ —É–¥–æ–±–Ω—ã–º–∏ –∏ –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ <i>–¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞</i>, "
                "–ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—è –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –∏ –æ—Ç–ª–∏—á–Ω—ã–π —Å–µ—Ä–≤–∏—Å.\n\n"
                "üíü HomeBerries –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç <i>—É–¥–æ–±–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å, "
                "–±—ã—Å—Ç—Ä–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞ –∏ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ —Ç–æ–≤–∞—Ä–æ–≤</i>, —á—Ç–æ–±—ã —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç—å –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏ –∫–∞–∂–¥–æ–≥–æ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è."
            ),
            parse_mode='HTML',  # –£–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º HTML
            reply_markup=aboutus_markup
        )

    if query.data == 'option3':
        feedback_keyboard = [
            [InlineKeyboardButton('–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç–∑—ã–≤—ã', callback_data='show_reviews')],
            [create_return_button()]
        ]
        feedback_markup = InlineKeyboardMarkup(feedback_keyboard)
        await query.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤:",
                                       reply_markup=feedback_markup)
        return  # –û–∂–∏–¥–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    if query.data == 'show_reviews':
        await show_reviews(update.callback_query, context)

    if query.data == 'return':
        await show_main_menu(update.callback_query, context)

async def show_main_menu(update, context):
    photo = 'https://cdn.midjourney.com/af2a054c-f406-4d25-b83e-ddda6495e1bb/0_2.png'
    await context.bot.send_photo(
        chat_id=update.message.chat_id,
        photo=photo,
        caption="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –¢–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É HomeBerries! –í—ã–±–µ—Ä–∏—Ç–µ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ, "
                "—á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç:",
        reply_markup=markup
        )

async def show_reviews(update, context):
    db_sess = db_session.create_session()
    reviews = db_sess.query(Review).all()

    if reviews:
        reviews_text = "\n".join([f"–û—Ç–∑—ã–≤ '{review.id}: {review.review}', {review.created_at[:10]}" for review in reviews])
        await update.message.reply_text(reviews_text)
    else:
        await update.message.reply_text("–û—Ç–∑—ã–≤–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.")

async def handle_review(update, context):
    user_id = update.message.from_user.id
    review_text = update.message.text

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–∑—ã–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    db_sess = db_session.create_session()
    review = Review(user_id=user_id, review=review_text)
    db_sess.add(review)
    db_sess.commit()

    await update.message.reply_text("–í–∞—à –æ—Ç–∑—ã–≤ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")


def start_bot():
    application = Application.builder().token(BOT_TOKEN).build()
    db_session.global_init("../db/hb.db")
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(button))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_review))
    application.run_polling()


if __name__ == "__main__":
    start_bot()